<?php
// $Id$

/**
 * @file
 * Test the Subversion post-commit hook integration.
 *
 * The post-commit hook records commits into the database once an operation has
 * finished.
 *
 * Copyright 2009 by Daniel Hackney ("dhax", http://drupal.org/user/384635)
 */

require_once(drupal_get_path('module', 'versioncontrol_svn') .'/tests/svn_helper.inc');

class SvnPostCommitTestCase extends SvnHelper {

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('versioncontrol_svn post-commit hook'),
      'description' => t('Test the functionality of the SVN post-commit hook'),
      'group' => t('Version Control - SVN Integration'),
    );
  }

  /**
   * Test the printing of usage information when incorrect number of arguments
   * is given.
   */
  function testInvalidArgHelp() {
    $this->initRepo();
    $this->initHook('post-commit');

    $result = shell_exec($this->hooks['post-commit']['svn_file'] .' 2>&1');
    $usage_text = t('Usage: php !cli <config file> REPO_PATH REV_NUM',
                  array('!cli' => $this->hooks['post-commit']['dst']));

    $this->assertTrue(
      is_int(strpos($result, $usage_text)),
      t('Print help text when incorrect number of arguments is given.'),
      t('Shell Interaction')
    );
  }

  /**
   * Test committing to a repository when the svn username of the committer does
   * not match any account in the database.
   *
   * Should assign the commit to uid 0, anonymous.
   */
  function testNoUserAccount() {
    $this->initRepo();
    $this->initHook('post-commit');

    $this->wcCheckout();

    $path = $this->randomName();
    $contents = $this->randomName();
    $message = $this->randomName();
    $name = $this->randomName();

    $this->wcAddSampleFile($path, $contents);

    $user = $this->drupalCreateUser(array('administer version control systems'));
    $this->drupalLogin($user);
    $this->initDrupalRepo();
    $result = $this->wcCommit($message);
    $pattern = '/Committed revision (\d+)\./';
    $this->assertTrue(
      preg_match($pattern, $result, $matches),
      t('Commited successfully.'),
      t('Shell Interaction')
    );

    $rev = $matches[1];
    $this->assertNotNull(
      $rev,
      t('Commit output contained a revision.'),
      t('Shell Interaction')
    );

    $operations = versioncontrol_get_commit_operations(array(
      'vcs' => array('svn'),
      'repo_ids' => array($this->repo['id']),
    ));
    $this->assertEqual(
      count($operations),
      1,
      t('One commit operation exists in the repository.'),
      t('post-commit hook')
    );

    $operation = array_shift($operations);
    $this->assertEqual(
      $operation['uid'],
      0,
      t('Commit without a user account is attributed to uid 0 (anonymous).'),
      t('post-commit hook')
    );
    $this->assertEqual(
      $operation['username'],
      $this->server_user,
      t('Username was correctly set.'),
      t('post-commit hook')
    );
    $this->assertEqual(
      $operation['message'],
      $message,
      t('Message is set correctly.'),
      t('post-commit hook')
    );
    $this->assertEqual(
      $operation['revision'],
      $rev,
      t('Revision is set correctly.'),
      t('post-commit hook')
    );
  }

  /**
   * Test updating the repository from the post-commit hook and a user with an
   * account on the repository.
   */
  function testRegisteredLog() {
    $this->initRepo();
    $this->initHook('post-commit');

    $path = $this->randomName();
    $contents = $this->randomName();
    $message = $this->randomName();
    $user = $this->drupalCreateUser(array(
      'administer version control systems', 'access commit messages',
    ));
    $this->drupalLogin($user);

    $this->initDrupalRepo();

    $menu_path = "versioncontrol/register/$user->uid/". $this->repo['id'];
    $edit = array();
    $edit['account_name'] = $this->server_user;
    $this->drupalPost($menu_path, $edit, t('Create Subversion account'));

    $this->wcCheckout();
    $this->wcAddSampleFile($path, $contents);
    $result = $this->wcCommit($message);

    // Did not receive an error.
    $error_pattern = '/Warning: post-commit hook failed \\(exit code (\d+)\\) with output:/';
    $this->assertFalse(
      preg_match($error_pattern, $result, $matches),
      t('post-commit hook succeeds when a user account exists with the repository.'),
      t('post-commit hook')
    );

    // Get the revision we just committed (will be 1).
    $revision_pattern = '/Committed revision (\d+)./';
    $this->assertTrue(
      preg_match($revision_pattern, $result, $matches),
      t('Commit output contains a revision number.'),
      t('post-commit hook')
    );
    $revision = $matches[1];

    $operations = versioncontrol_get_commit_operations(array(
      'repo_ids' => array($this->repo['id']),
    ));

    // Find the revision with id $revision, as returned by the commit output.
    foreach ($operations as $vc_op_id => $operation) {
      if ($operation['revision'] == $revision) {
        break;
      }
      $this->fail(t('Correctly insert a commit to the database.'), t('post-commit hook'));
    }

    $this->assertEqual(
      $operation['username'],
      $this->server_user,
      t('Username in database matches committer username'),
      t('post-commit hook')
    );
    $this->assertEqual(
      $operation['uid'],
      $user->uid,
      t('Drupal uid correctly recorded for commit.'),
      t('post-commit hook')
    );
    $this->assertEqual(
      $operation['message'],
      $message,
      t('Commit message matches input message.'),
      t('post-commit hook')
    );

    // Check the commit log.
    $this->assertOperationLog($vc_op_id, $operation);
  }
}
